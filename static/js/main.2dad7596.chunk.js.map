{"version":3,"sources":["svg/loading.svg","js/file-fetch.js","js/filetree-components.js","js/editor.js","index.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","_ref2","createElement","d","stroke","strokeWidth","_ref","svgRef","title","props","width","height","viewBox","fill","ref","ForwardRef","forwardRef","mainUrl","loadingComponent","TreeItem","state","open","loading","id","file","isDirectory","setState","prevState","window","mainApp","editor","currentFile","forceUpdate","Promise","resolve","reject","fetch","then","response","json","result","catch","e","contents","onFileLoaded","icons","children","map","value","index","indentation","className","onClick","onItemPressed","style","paddingLeft","name","React","Component","defaultProps","Editor","fileEdited","textarea","content","scrollHeight","ev","shiftKey","selectionStartPos","selectionStart","selectionEndPos","selectionEnd","oldContent","substring","preventDefault","ctrlKey","onSave","numberOfLines","split","lines","push","onFileClose","c","onInput","editorEditHandle","onKeyDown","editorInputHandle","spellCheck","defaultValue","App","treeLoaded","tree","saving","deleting","currentTheme","data","loadFile","JSON","stringify","method","body","onFileSaved","document","savingIcon","deletingIcon","themeBtn","saveBtn","disabled","deleteBtn","onFileQuerySave","onFileQueryDelete","onThemeSwitch","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.2dad7596.chunk.js","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M244 128C244 192.065 192.065 244 128 244C63.935 244 12 192.065 12 128C12 63.935 63.935 12 128 12C192.065 12 244 63.935 244 128Z\",\n  stroke: \"black\",\n  strokeWidth: 24\n});\n\nvar SvgLoading = function SvgLoading(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 256,\n    height: 256,\n    viewBox: \"0 0 256 256\",\n    fill: \"none\",\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgLoading, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/loading.7e99b4a2.svg\";\nexport { ForwardRef as ReactComponent };","// Simple REST Api to communicate with the mock server\r\n\r\n// The main mock server URL, all the commands after derives from this URL\r\nconst mainUrl = \"https://my-json-server.typicode.com/open-veezoo/editor\";\r\n// Returns the filetree as nested objects (async)\r\nfunction getFiletree() {\r\n    return new Promise((resolve, reject) => {\r\n        fetch(mainUrl + \"/filetree\")        // Request\r\n        .then(response => response.json())  // Convert to JSON\r\n        .then(result => resolve(result))    // Resolve the promise with the filetree\r\n        .catch(e => reject(e));             // In case of anu error, reject the promise with the error status\r\n    });\r\n}\r\n// Returns a file content by it fileId (async)\r\nfunction getFileContents(id) {\r\n    return new Promise((resolve, reject) => {\r\n        fetch(mainUrl + \"/files/\" + id)     // Request\r\n        .then(response => response.json())  // Convert to JSON\r\n        .then(result => resolve(result))    // Resolve the promise with the contents of the file\r\n        .catch(e => reject(e));             // In case of anu error, reject the promise with the error status\r\n    });\r\n}\r\n// Save the file content by it fileId (async), this doesn't truely save the file, but\r\n// the server returns OK code. \r\nfunction saveFile(id, content) {\r\n    // In case the content is an object, convert to string\r\n    if (typeof content == \"object\") {\r\n        content = JSON.stringify(content);\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n        fetch(mainUrl + \"/files/\" + id, {       // Request using PUT method using its content as body\r\n            method: 'PUT',\r\n            body: content\r\n        })\r\n        .then(response => resolve(response))    // Resolve the promise with the status code\r\n        .catch(e => reject(e));                 // In case of anu error, reject the promise with the error status\r\n    });\r\n}\r\n// Delete the file by it fileId (async), this doesn't truely delete the file, but\r\n// the server returns OK code. \r\nfunction deleteFile(id) {\r\n    return new Promise((resolve, reject) => {\r\n        fetch(mainUrl + \"/files/\" + id, {       // Request using DELETE method\r\n            method: 'DELETE'\r\n        })\r\n        .then(response => resolve(response))    // Resolve the promise with the status code\r\n        .catch(e => reject(e));                 // In case of anu error, reject the promise with the error status\r\n    });\r\n}\r\n\r\n// Exports all the REST functions from this module\r\nexport {getFiletree, getFileContents, saveFile, deleteFile};","import React from 'react';\r\nimport {getFileContents} from './file-fetch';\r\nimport {FaCaretDown, FaCaretRight, FaFolder, FaFolderOpen, FaFileAlt} from 'react-icons/fa/index.esm';\r\n\r\n// Indentation (padding) addition between the depth (folders) in the tree\r\nconst HIERARCHY_INDENTATION = 8;\r\n// The current component that is loading a file\r\nvar loadingComponent = null;\r\n\r\n// Main TreeItem UI to interact with the files in the tree\r\nclass TreeItem extends React.Component {\r\n    // Called when instantiated\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            open: false,    // In case the TreeItem 'isDirectory' prop is true, this is used\r\n            loading: false  // Status of the file load\r\n        };\r\n    }\r\n    // Called when this item is pressed\r\n    onItemPressed() {\r\n        // In case this TreeItem 'isDirectory' prop is true, change the state 'open' to render or not its children\r\n        if (this.props.file.isDirectory) {\r\n            this.setState(prevState => ({\r\n                open: !prevState.open\r\n            }));\r\n        // In case this TreeItem 'isDirectory' prop is false, by any means, is a file, handles differently\r\n        } else {\r\n            // Returns if the current editor opened file is the same as this TreeItem file\r\n            if (window.mainApp?.editor?.state.currentFile?.id === this.props.file.id) return;\r\n            // Set the state to render the loading animation\r\n            this.setState({\r\n                loading: true\r\n            });\r\n            // Force the root render to update full filetree, so if another TreeItem is loading,\r\n            // hide the loading animation of this another TreeItem.\r\n            window.mainApp.forceUpdate();\r\n            // Change the current global loading TreeItem\r\n            loadingComponent = this;\r\n            // Get from the server the file contents by the fileId provided in the props (async)\r\n            getFileContents(this.props.file.id).then(contents => {\r\n                // Set the state to stop rendering the loading animation\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n                // In case the current global loading TreeItem is this, by any means,\r\n                // no other TreeItem than this is loading, continue\r\n                if (loadingComponent !== this) return;\r\n                // Call the 'onFileLoaded' function provided in the props,\r\n                // the root TreeItem calls the App 'onFileLoaded', the sibbling calls\r\n                // the parent TreeItem 'onFileLoaded' recursively until reaches the root\r\n                this.props.onFileLoaded(contents);\r\n                // The current global loading TreeItem is now null, as finished loading\r\n                loadingComponent = null;\r\n                // Force render update to hide the loading animation\r\n                this.forceUpdate();\r\n            });\r\n        }\r\n    }\r\n    // Hack: the provided ReactJS React.Component.forceUpdate don't work in some cases,\r\n    // so this override function force a state update to force render (and force render for its childs)\r\n    forceUpdate() {\r\n        this.setState(this.state);\r\n    }\r\n    // Called when is needed to render the component\r\n    render() {\r\n        // Renders this block in case 'isDirectory' prop is true\r\n        if (this.props.file.isDirectory) {\r\n            // Store the children TreeItem in a array\r\n            var children = [];\r\n            // In case this TreeItem is opened, pass for every children in the file provided in the props,\r\n            // this creates a recursive TreeItem tree, being able to show all files from the tree\r\n            if (this.state.open) {\r\n                // For every childre, the indendation is this TreeItem indentation + the HIERARCHY_INDENTATION constant\r\n                children = this.props.file.children.map((value, index) => {\r\n                    return (<TreeItem key={index} file={value} onFileLoaded={(contents) => this.props.onFileLoaded(contents)} indentation={this.props.indentation + HIERARCHY_INDENTATION}/>)\r\n                });\r\n            }\r\n            // Array storing two icons: a caret (right or down) and the folder icon (closed or opened)\r\n            var icons;\r\n            if (this.state.open) {\r\n                icons = [(<FaCaretDown key={0} />), (<FaFolderOpen key={1} />)];\r\n            } else {\r\n                icons = [(<FaCaretRight key={0} />), (<FaFolder key={1} />)];\r\n            }\r\n            // Render this TreeItem\r\n            return (\r\n                <div className=\"filetree-filelist\">\r\n                    <button onClick={() => this.onItemPressed()} className=\"filetree-item\" style={{paddingLeft: this.props.indentation+\"px\"}}>\r\n                        <span className=\"filetree-item-icons folder\">\r\n                            {icons}\r\n                        </span>\r\n                        <span className=\"filetree-item-filename\">{this.props.file.name}</span>\r\n                    </button>\r\n                    {children}\r\n                </div>\r\n            )\r\n        // Render this block is case 'isDirectory' prop is false\r\n        } else {\r\n            // The current className, is stored in a variable to be able to change after\r\n            var className = \"filetree-item\";\r\n            // The element showed while the file is loading\r\n            var loading;\r\n            // In case the current global loading component is this TreeItem, show a loading animation\r\n            if (loadingComponent === this) {\r\n                loading = (<span className=\"filetree-item-loading\"><span/><span/><span/></span>)\r\n            }\r\n            // In case a editor is open, the currentFile of the editor is not null and the the id of the file\r\n            // is the same as this TreeItem file id, add a class to this component\r\n            if (window.mainApp?.editor?.state.currentFile?.id ===  this.props.file.id) {\r\n                className += \" currentfile\";\r\n            }\r\n            // Render this TreeItem\r\n            return (\r\n                <button onClick={() => this.onItemPressed()} className={className} style={{paddingLeft: this.props.indentation+\"px\"}}>\r\n                    <span className=\"filetree-item-icons file\">\r\n                        <FaFileAlt />\r\n                    </span>\r\n                    <span className=\"filetree-item-filename\">{this.props.file.name}</span>\r\n                    {loading}\r\n                </button>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n// Change the default props of the TreeItem to indent once\r\nTreeItem.defaultProps = {\r\n    indentation: HIERARCHY_INDENTATION,\r\n}\r\n\r\n// Export the TreeItem component from this tree\r\nexport {TreeItem}","import React from 'react';\r\n\r\n// The Editor component, UI for edit the current file\r\nclass Editor extends React.Component {\r\n    // Called when instantiated\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            currentFile: null,      // Current loaded file\r\n            fileEdited: false,      // Boolean that is true after the content is edited, false if not edited or saved\r\n        }\r\n        this.textarea = null;       // The HTML textarea reference\r\n    }\r\n    // Called when a file is loaded, called from the App component\r\n    loadFile(contents) {\r\n        // Set the new state to store the current loaded file contents (id, name and content)\r\n        // and set the fileEdited state to false\r\n        this.setState({\r\n            currentFile: contents,\r\n            fileEdited: false,\r\n        });\r\n        // Change the textarea initial content\r\n        this.textarea.value = contents.content;\r\n        // A way to automatically resize the textarea to fit its content (min fittable height as the parent height as flexbox model and\r\n        // max fittable height as the content height)\r\n        this.textarea.style.height = 'auto';\r\n        this.textarea.style.height = this.textarea.scrollHeight+'px';\r\n    }\r\n    // Called after the file is saved, called from the App component\r\n    onFileSaved() {\r\n        // Change the current state to say that the current file is not edited because the current content\r\n        // is in pair with the file\r\n        this.setState({\r\n            fileEdited: false\r\n        });\r\n    }\r\n    // Called when some input is detected inside textarea\r\n    editorInputHandle(ev) {\r\n        // Handle indentation\r\n        if (ev.key === \"Tab\" && !ev.shiftKey) {\r\n            var selectionStartPos = this.textarea.selectionStart;\r\n            var selectionEndPos = this.textarea.selectionEnd;\r\n            var oldContent = this.textarea.value;\r\n            this.textarea.value = oldContent.substring( 0, selectionStartPos ) + \"\\t\" + oldContent.substring( selectionEndPos );\r\n            this.textarea.selectionStart = this.textarea.selectionEnd = selectionStartPos + 1;\r\n            ev.preventDefault();\r\n        }\r\n        // Handle CTRL+S (Save file) shortcut\r\n        if (ev.key === \"s\" && ev.ctrlKey && this.state.fileEdited) {\r\n            this.props.onSave(this.state.currentFile);\r\n            ev.preventDefault();\r\n        }\r\n    }\r\n    // Called after the textarea contents (value) is changed.\r\n    // This code is not called in editorInputHandle because the function before the content is changed\r\n    editorEditHandle(ev) {\r\n        // Case the current textarea content is not in pair with the current loaded file content\r\n        // this change the copy of the contents, not the file itself\r\n        if (this.textarea.value !== this.state.currentFile.content) {\r\n            // Set the new state to change the current file content to the textarea value\r\n            // and change the fileEdited boolean to true\r\n            this.setState(prevState => ({\r\n                currentFile: {...prevState.currentFile, content: this.textarea.value},\r\n                fileEdited: true\r\n            }));\r\n        }\r\n        // A way to automatically resize the textarea to fit its content (min fittable height as the parent height as flexbox model and\r\n        // max fittable height as the content height)\r\n        this.textarea.style.height = 'auto';\r\n        this.textarea.style.height = this.textarea.scrollHeight+'px';\r\n    }\r\n    // Called when the close button is pressed\r\n    onFileClose() {\r\n        // Set the new state, the currentFile is null and fileEdited boolean is false\r\n        // because is not needed to store the currentFile content.\r\n        // This calls the App forceUpdate function after the state is effectively changed\r\n        this.setState({\r\n            currentFile: null,\r\n            fileEdited: false\r\n        }, () => window.mainApp.forceUpdate());\r\n    }\r\n    // Called when is needed to render the component\r\n    render() {\r\n        // Render this block in case a file is loaded\r\n        if (this.state.currentFile) {\r\n            // Get the number of lines in the content splitting the content from the line break (\\n) characters\r\n            var numberOfLines = this.state.currentFile.content.split(\"\\n\").length;\r\n            // A array storing the lines to render\r\n            var lines = [];\r\n            // For loop for the number of lines and store a span element with the number as text\r\n            for (var i = 0; i < numberOfLines; i++) {\r\n                lines.push(<span key={i}>{i+1}</span>);\r\n            }\r\n            // Render the editor\r\n            return (\r\n                <div className=\"editor opened\">\r\n                    <span className=\"editor-filename\">\r\n                        {\r\n                            // Display a '*' after the filename in the top to indicate that the current file is edited\r\n                            this.state.fileEdited ? this.state.currentFile.name + \"*\" : this.state.currentFile.name\r\n                        }\r\n                        <button onClick={() => this.onFileClose()} className=\"file-close\"></button>\r\n                    </span>\r\n                    <span className=\"editor-contents\">\r\n                        <span className=\"editor-lines\">\r\n                            {\r\n                                // Renders the lines stored before\r\n                                lines\r\n                            }\r\n                        </span>\r\n                        <textarea ref={c => {this.textarea = c}} onInput={ev => this.editorEditHandle()} onKeyDown={ev => this.editorInputHandle(ev)} spellCheck={false} defaultValue={this.state.currentFile.content}></textarea>\r\n                    </span>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div className=\"editor\">\r\n                    <span className=\"empty-editor\">Open a file from the left menu to edit</span>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n// Exports the Editor component from this module\r\nexport {Editor}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {ReactComponent as LoadingIcon} from './svg/loading.svg';\r\nimport {getFiletree, saveFile, deleteFile} from './js/file-fetch';\r\nimport {TreeItem} from './js/filetree-components';\r\nimport {Editor} from './js/editor';\r\nimport {FaSave, FaMoon, FaSun, FaTrashAlt} from 'react-icons/fa/index.esm';\r\n\r\n// Main app component\r\nclass App extends React.Component {\r\n    // Called when instantiated\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            treeLoaded: false,      // Status of the filetree\r\n            tree: [],               // The filetree returned by the API\r\n            saving: false,          // Status of the current file saving\r\n            deleting: false,        // Status of deleting the current file\r\n            currentTheme: 'dark'    // Current app theme ('light' or 'dark')\r\n        };\r\n        this.editor = null;         // The Editor instanciated component\r\n        window.mainApp = this;      // The global reference of the root component\r\n    }\r\n    // Called after the component is inserted at the tree\r\n    componentDidMount() {\r\n        // Get the filetree from the API (async)\r\n        getFiletree().then(data => {\r\n            // Set the new state after the data is returned from the server\r\n            this.setState({\r\n                treeLoaded: true,\r\n                tree: data\r\n            });\r\n        });\r\n    }\r\n    // Called when a file is returned from the server from its fileId\r\n    onFileLoaded(contents) {\r\n        this.editor.loadFile(contents);\r\n        this.forceUpdate();\r\n    }\r\n    // Called when needs to save the file (from the save button or 'CTRL+S' shortcut)\r\n    onFileQuerySave(contents) {\r\n        if (this.state.deleting) return;\r\n        // If is not passed any parameter, saves the current file\r\n        contents = contents ?? this.editor.state.currentFile;\r\n        // Set this state to render the saving animation\r\n        this.setState({\r\n            saving: true\r\n        });\r\n        // Save the file to the server (async), this doesn't truely save the file, but\r\n        // the server returns OK code.\r\n        saveFile(contents.id, contents)\r\n        .then(response => {\r\n            // Call the Editor component onFileSaved function to update\r\n            // its state\r\n            this.editor.onFileSaved();\r\n            // Set this state to stop renderering the saving animation\r\n            this.setState({\r\n                saving: false\r\n            });\r\n        });\r\n    }\r\n    // Called when needs to delete the file (from the delete button)\r\n    onFileQueryDelete() {\r\n        if (this.state.saving) return;\r\n        // Set this state to render the deleting animation\r\n        this.setState({\r\n            deleting: true\r\n        });\r\n        // Delete the file to the server (async), this doesn't truely delete the file, but\r\n        // the server returns OK code.\r\n        deleteFile(this.editor.state.currentFile.id)\r\n        .then(response => {\r\n            // Call the Editor component onFileClose function to update\r\n            // its state\r\n            this.editor.onFileClose();\r\n            // Set this state to stop renderering the deleting animation\r\n            this.setState({\r\n                deleting: false\r\n            });\r\n        });\r\n    }\r\n    // Hack: the provided ReactJS React.Component.forceUpdate don't work in some cases,\r\n    // so this override function force a state update to force render (and force render for its childs)\r\n    forceUpdate() {\r\n        this.setState(this.state);\r\n    }\r\n    // Called when the theme switch button is pressed\r\n    onThemeSwitch() {\r\n        // Switch between 'dark' and 'light'\r\n        if (this.state.currentTheme === 'dark') {\r\n            this.setState({\r\n                currentTheme: 'light'\r\n            });\r\n        } else {\r\n            this.setState({\r\n                currentTheme: 'dark'\r\n            });\r\n        }\r\n    }\r\n    // Called when is needed to render the component\r\n    render() {\r\n        // Change the document body className to match the current theme\r\n        // to apply the desired theme in CSS\r\n        document.body.className = this.state.currentTheme;\r\n        // Render this block after the filetree is loaded\r\n        if (this.state.treeLoaded) {\r\n            // The save button, is disabled by default\r\n            var saveBtn = (<button className=\"save\" title=\"Save the current file (CTRL+S)\" disabled><FaSave /></button>);\r\n            // The delete button, is disabled by default\r\n            var deleteBtn = (<button className=\"delete\" title=\"Delete the current open file\" disabled><FaTrashAlt /></button>);\r\n            // Icon to show while saving the current opened file\r\n            var savingIcon;\r\n            // Icon to show while deleting the current opened file\r\n            var deletingIcon;\r\n            // Button to switch between the themes\r\n            var themeBtn;\r\n            // Change the save and delete button when the current file is opened to a button not disabled\r\n            if (this.editor && this.editor.state.currentFile !== null) {\r\n                if (!this.state.deleting && !this.state.saving) {\r\n                    saveBtn = (<button className=\"save\" title=\"Save the current file (CTRL+S)\" onClick={() => this.onFileQuerySave()}><FaSave /></button>);\r\n                }\r\n                if (!this.state.saving && !this.state.deleting) {\r\n                    deleteBtn = (<button className=\"delete\" title=\"Delete the current open file\" onClick={() => this.onFileQueryDelete()}><FaTrashAlt /></button>);\r\n                }\r\n            }\r\n            // Show the deleting icon if deleting\r\n            if (this.state.deleting) {\r\n                deletingIcon = <span className=\"deleting-icon\" />\r\n            }\r\n            // Show the saving icon if saving\r\n            else if (this.state.saving) {\r\n                savingIcon = <span className=\"saving-icon\" />\r\n            }\r\n            // Change the theme switch button icon to Font-Awesome FaSun icon if the current theme is 'dark'\r\n            if (this.state.currentTheme === \"dark\") {\r\n                themeBtn = (\r\n                    <button onClick={() => this.onThemeSwitch()} className=\"theme-switch\">\r\n                        <FaSun></FaSun>\r\n                    </button>\r\n                );\r\n            // Change the theme switch button icon to Font-Awesome FaMoon icon if the current theme is 'light'\r\n            } else {\r\n                themeBtn = (\r\n                    <button onClick={() => this.onThemeSwitch()} className=\"theme-switch\">\r\n                        <FaMoon></FaMoon>\r\n                    </button>\r\n                );\r\n            }\r\n            // Render the main UI\r\n            return (\r\n            <div className=\"app\">\r\n                <div className=\"top\">\r\n                    {deleteBtn}\r\n                    {saveBtn}\r\n                    {savingIcon}\r\n                    {deletingIcon}\r\n                </div>\r\n                <div className=\"center\">\r\n                    <div className=\"sidebar\">\r\n                        <div className=\"filetree-filelist\">\r\n                            {\r\n                                // Pass for every file loaded in the tree root to render a TreeItem component, with the props:\r\n                                //      'key' as the map index;\r\n                                //      'file' as the map value (object representing the file);\r\n                                //      'onFileLoaded' as the App function called when a file is loaded.\r\n                                this.state.tree.map((value, index) => {\r\n                                    return (<TreeItem key={index} file={value} onFileLoaded={(contents) => this.onFileLoaded(contents)}/>)\r\n                                })\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    <Editor onSave={contents => {this.onFileQuerySave(contents)}} ref={c => this.editor = c} />\r\n                </div>\r\n                <div className=\"bottom\">\r\n                    <span className=\"copyright\">Copyright @ 2020, Gabriel H. P. Soares</span>\r\n                    {themeBtn}\r\n                </div>\r\n            </div>);\r\n        // Render this block while loading the filetree\r\n        } else {\r\n            return (<div className=\"app-loading\">\r\n                <LoadingIcon className=\"loading-circle\"/>\r\n                <h1>\r\n                    Booting up the awesome editor\r\n                </h1>\r\n            </div>);\r\n        }\r\n    }\r\n}\r\n\r\n// Render the App component at the #root html element\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById(\"root\")\r\n)"],"sourceRoot":""}